<!-- There are set of rules in programming called design patterns, these design patterns help developers to create reusable and maintainable code. -->
<!-- Some common JavaScript design patterns include: -->
<!-- Module Pattern : It is used to encapsulate related code into a single unit, providing private and public access to variables and functions. -->
<!-- Singleton Pattern : It ensures that a class has only one instance and provides a global point of access to that instance. -->
<!-- Factory Pattern : It is used to create objects without specifying the exact class of object that will be created. -->
<!-- Observer Pattern : It is used to create a one-to-many dependency between objects, so that when one object changes state, all its dependents are notified and updated automatically. -->
<!-- Prototype Pattern : It is used to create new objects by cloning existing objects, allowing for efficient object creation and inheritance. -->
<!-- Revealing Module Pattern : It is a variation of the module pattern that exposes only selected methods and properties, keeping the rest private. -->
<!-- Command Pattern : It encapsulates a request as an object, allowing for parameterization of clients with different requests, queuing of requests, and logging of requests. -->
<!-- Decorator Pattern : It allows behavior to be added to individual objects, either statically or dynamically, without affecting the behavior of other objects from the same class. -->

<!-- These patterns can be combined and adapted to fit the specific needs of a project, helping to improve code organization, readability, and maintainability. -->

